<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<title>GUSemu32 Manual</title>
<meta name="description" content="Current state of programs being supported or nt by GUSemu">
<meta name="keywords" content="gusemu,gravis,ultrasound,ultrasnd,dos,demos,intros,windows95,windows2000,sound">
<link rel=stylesheet type="text/css" href="gusemu.css">
</head>
<body background="back.jpg" bgcolor="#0000a0" text="#ffff80" link="#ff8000" vlink="#804000" alink="#ff0000">

<div align="center" class="nb">
 <a href="index.html" class="ilink" title="Click here to get to the GUSemu main page">GUSemu&nbsp;Homepage</a> - <a href="news.htm" class="ilink" title="Program and homepage update history">News</a> - <a href="complist.htm" class="ilink" title="List of tested intros">Intro&nbsp;Compatibility&nbsp;List</a> - <a href="cmpdmlst.htm" class="ilink" title="List of tested demos">Demo&nbsp;Compatibility&nbsp;List</a> - <a href="manual.htm" class="ilink" title="Read the manual online here">GUSemu32&nbsp;Manual</a> - <a href="manual.htm#sysreq" class="ilink" title="What GUSemu needs">System&nbsp;Requirements</a> - <a href="manual.htm#faq" class="ilink" title="Frequently Asked Questions">FAQ</a> - <a href="download.htm" class="ilink" title="Download GUSemu">Download&nbsp;Page</a> - <a href="thanx.htm" class="ilink" title="Greets">Links &amp; Greets</a>
</div>
<hr>

<h2>GUSemu32 Manual</h2>
<div class="block">
GUSemu32 - the Gravis Ultrasound emulator for Win32
<h4>Overview:</h4>
<ul>
<li><a href="#sysreq">System Requirements</a></li>
<li><a href="#use">Usage</a></li>
<li><a href="#info">Emulation Issues</a></li>
<li><a href="#state">Current State of Implementation</a></li>
<li><a href="#prob">Troubleshooting</a></li>
<li><a href="#faq">Frequently Asked Questions</a></li>
<li><a href="#legal">Legal Stuff</a></li>
</ul>
</div>

<a name="sysreq"><h2>System Requirements</h2></a>
<div class="block">
Without the following GUSemu won´t work:
<ul>
<li>Windows 95/98/ME or Windows 2000/XP</li>
<li>Pentium class CPU</li>
<li>DirectX 5 or better</li>
<li>Soundcard supported by DirectSound</li>
</ul>

Heavily recommended:
<ul>
<li>faster CPU (300MHz+)</li>
<li>at least 32 MB of RAM</li>
<li>Soundcard with drivers for DirectSound capable of 44.1 kHz,16Bit,Stereo</li>
<li>Proper settings in config.sys + autoexec.bat / config.nt + autoexec.nt (HIMEM / EMS enabled, at least 550k of conventional DOS memory)</li>
</ul>
Not that much, isn´t it ?
</div>

<a name="use"><h2>How to use it</h2></a>
<div class="block">
<h4>Installation (Win 9x/ME/2000/XP)</h4>
Unpack / copy the files into a directory of your choice.<br>GUS emulation is instantly available whenever GUSemu32.exe is running. You can also change the configuration there.
<h4>Using the GUSemu32 GUI</h4>
<img src="g32gui.png" width="310" height="229" alt="GUSemu32 GUI" align="left">This is the control panel of the GUSemu32 application. Using the minimize button, you can put it into the taskbar as a tray icon.<br>The titlebar always shows the currently selected base address, IRQs and DMA channels.<br>In the main area, the currently playing out of the maximum voices enabled are shown, followed by the number of interrupts scheduled into the DOS box per second (note that this includes queued interrupts as well - the actual number might be less if several IRQ conditions are cleared at the same time). The indicators below are set as soon as DMA or IRQ requests occur.<br>Under Win95/98/ME, a more detailed statistic is available using the system monitor.<br>Whenever the tray icon gets red, GUSemu32 is active. This happens as soon as the first access to the GUS takes place. After 3 seconds of inactivity, the mixing engine is suspended and the tray icon gets blue again.<br>It is also possible to use GUSemu32 by right-clicking on any .exe, .com or .bat file and selecting the <tt>Run with GUSemu</tt> option.<br clear=all><br>
<h4>The Menus</h4>
<span class="menu">
GUSemu
</span>
<div class="menu">
Shutdown
</div>

<ul><li><b>Shutdown</b>:<br>Stops GUS emulation and closes the GUSemu32 application.</li></ul>

<span class="menu">
Tools
</span>
<div class="menu">
Clear GUS DRAM<br>
Reset GF1 Registers<br>
Reset GUSemu32<hr class="lay">
Permanent Statistics<br>
Wavetable RAM
</div>
<div class="smenu">
Dump to Disk<br>
Load from File
</div>

<ul>
<li><b>Clear GUS DRAM</b>:<br>Overwrites all sample data stored in RAM with zeroes, stops noise due to looped voices left running.</li>
<li><b>Reset GF1 Registers</b>:<br>Sets all GF1 internal registers back to their default state, stopping voice playback and IRQ generation.</li>
<li><b>Reset GUSemu32</b>:<br>Restarts the complete mixer / sound playback code.</li>
<li><b>Permanent Statistics</b>:<br>Updates, if enabled, the shown status of voices and IRQ numbers several times per second instead of only at time of window redrawal. Eats pretty much CPU time.</li>
<li><b>Wavetable RAM</b>
<ul>
<li><b>Dump to Disk</b>:<br>Stores the current content of the GUS Wavetable DRAM into a file sized 1MB as raw data to disk (useful for sample ripping). Shows a SaveDialog for filename selection.</li>
<li><b>Load from File</b>:<br>Loads the content of an user-selected file as raw data into the GUS Wavetable DRAM. The file content is stored from the beginning of the GUS Wavetable DRAM up to the end of the selected file, file content above 1MB is ignored.</li>
</ul></li>
</ul>

<span class="menu">
Config
</span>
<div class="menu">
Change GUS Port, DMA, IRQ<br>
Run with GUSemu option
<hr class="lay">
Set GF1 Framerate / Samples per Frame<hr class="lay">
Set Soundbuffer update rate / Block length<br>
Set number of prebuffers<br>
Buffer update using DSound event
</div>
<div class="smenu">
Sync with Soundbuffer<br>
10 Hz / 4410 Samples<br>
20 Hz / 2205 Samples<br>
50 Hz /  882 Samples<br>
100 Hz /  441 Samples<br>
200 Hz /  220 Samples<br>
500 Hz /  88 Samples<br>
1000 Hz /  44 Samples
</div>
<div class="smenu">
8 Hz / 125ms<br>
12 Hz /  83ms<br>
16 Hz /  62ms<br>
20 Hz /  50ms<br>
24 Hz /  42ms<br>
28 Hz /  36ms<br>
32 Hz /  31ms<br>
40 Hz /  25ms<br>
48 Hz /  21ms<br>
56 Hz /  18ms<br>
64 Hz /  16ms<br>
100 Hz / 10ms
</div>
<div class="smenu">
1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
11<br>
13<br>
15
</div>

<ul>The following settings are stored permanently within the registry and can be changed on-the-fly even when GUSemu32 is playing back sound:
<li><b>Change GUS Port, DMA, IRQ</b>:<br>Opens a Dialog for changing the Base Address, the IRQ and the DMA channel.<br>Valid Ports range from 210h - 290h (usually set to 220h, 240h or 260h),<br>IRQ can be any IRQ between 0 and 15 (IRQ 3,5,7,9 preferred),<br>DMA can be any number between 0 and 7 (channel 1 or 3 preferred).<br>IRQs and DMA channels are completely virtualized within a DOS Box, it is possible to use DMA and IRQ channels which are also used by other devices.<br>However, port addresses cannot be shared and are thus not available if another driver already reserves or them.</li>
<li><b>Run with GUSemu option</b>: When checked, GUSemu32 can be started out of the context menu of a .exe, .com or .bat file.</li>
<li><b>Set GF1 Framerate / Samples per Frame</b>:<br>Sets the frequency at which the sounddata is recalculated and mixed. Higher frequencies and thus lower mixing buffer sizes increase playback quality and latency but need more CPU time. Unless your PC is too slow or its configuration is somewhat mixed up, use 100 Hz or more. You may also use sounbuffer synchronized frames in order to reduce DOS box timing problems at the cost of mixing accuracy.</li>
<li><b>Set Soundbuffer update rate / Block length</b>:<br>Sets the update rate of the DirectSound buffer. Increasing the update rate decreases latency, but may cause clicks in the playback. The best setting depends on the OS (9x/ME or 2000), the program running within the DOS box and the soundcard driver.</li>
<li><b>Set number of prebuffers</b>:<br>Determines the number of prebuffers. A value of 1 indicates double buffering, 2 triple buffering and so on. 1 or 2 prebuffers should be enough on nearly all PCs.</li>
<li><b>Buffer update using DSound event</b>:<br>If checked, DirectSound notifies the mixer whenever a new block is needed. If it is not enabled, a separate thread is used to query the soundbuffer state. Try out which one works better on your PC (this depends on the driver and OS).</li>
</ul>
The average latency is calculated by:
<div class=calc>AverageLatency = ( (Number of prebuffers - 0.5 ) / Soundbuffer update rate) + (0.5 /GF1 Framerate)</div>
Replace <b>0.5</b> with <b>0</b> to get the minimum latency or by <b>1</b> to get the maximum latency using the current settings.<br>

<span class="menu">
Help
</span>
<div class="menu">
Manual<br>
Homepage<br>
E-Mail<br>
About</div>

<ul>
<li>Well... these items are pretty self-explanatory.</li>
</ul>

</div>

<a name="info"><h2>Emulation Issues</h2></a>
<div class="block">
An emulation of a hardware device cannot provide a completely equal environment like the hardware itself. The main problems are:
<ul>
<li>Hardware works asynchronous parallel to the program using it while the emulator works in concurrence with the program using it (at least in single-CPU environments). Thus, the program using the emulation grabs CPU time needed by the emulation and vice versa which can cause critically-timed programs not to work correctly.</li>
<li>The maximum timer frequency of a real GUS is 0.08ms rather than 1ms, the maximum timer frequency offered by Win32. Additionally, the interrupts can be delayed by some milliseconds by the OS. This affects only few programs, usual timer rates are above 1ms.</li>
<li>Emulating the registers and mixing the sample data takes some time. On today's machines... who cares about these few percent, the impact by running the programs within a multitasking systems DOS-Box is much higher.</li>
<li>The DMA-Controller works asynchronously while the emulator copies the entire memory block at once. This is a major problem for emulating soundblaster-type playback, but since the GUS requires the audio data copied to its local wavetable memory even in case of stream playback, it does not affect the GUS emulation.</li>
</ul>
However, there are also some benefits:
<ul>
<li>An emulator also works if it is impossible to use the according hardware for any reason</li>
<li>An emulation can provide benefits like sharing resources, built-in local data access,... </li>
<li>Changing the configuration is much easier</li>
</ul>
For an emulator running under Win32 providing emulation for DOS-Boxes, the compatibility is also affected by the capabilities of the OS itself rather than the emulator itself. This applies mainly to:
<ul>
<li>the amount and type of memory available (base memory, upper memory, XMS, EMS + VCPI, DPMI)</li>
<li>access and/or virtualization of hardware not covered by GUSemu32 (e.g. InterruptController, DMA Controller, SystemTimer, VGA card (VBE2 LFB is not available under Win2000 and XP; ModeX and VerticalBlank is not supported well))</li>
<li>access violations not caught in DOS can cause the programs to be thrown out by the OS</li>
<li>privileged instructions are either not available or emulated within a protected mode DOS box (note that a running EMM386 in DOS also switches into V86 mode). So programs depending on their own PMode switcher or memory manager do not run.</li>
<li><a name="if">STI and CLI are privileged instructions changing the Interrupt Flag (also called IF), while POPF also modifies IF without being privileged if executed at IOPL3. Being in Protected/V86 mode, none of the instructions can change IF directly. However, CLI and STI can be virtualized, while POPF cannot. As a result, when a program uses POPF for changing/restoring IF, the virtualized interrupt flag in the DOS Box is not correct. Typical behaviour is IF not being activated again, causing sound playback to stop or to hang and/or program execution to hang (the programs do not react to any IRQ then, including timer/keyboard/mouse IRQs). However, most of these programs can be patched by replacing POPF with a combination of STI.</a></li>
</ul>
Old programs (lets better say: badly written programs) do not run if the PC is too good. If the CPU is too fast, the program can crash or execute to fast. The first case is widespread in programs written in TurboPascal and can be patched, the second case can be solved by special slowdown utilities.<br>
And if there is more memory installed when the programmer ever thought of, memory-detection algorithms may fail due to interpreting the value as a negative or modulo number. Solve this be changing your shortcut file or the memory-manager configuration line in config.sys/config.nt
</div>

<a name="state"><h2>Current State of Implementation</h2></a>
<div class="block">
<h4>Implemented:</h4>
<ul>
<li>1024 kB local Wavetable RAM</li>
<li>Sample-uploading/downloading via register 3x7h or DMA</li>
<li>DMA transfers regarding GF1 pages, 8/16 bit and signed/unsigned conversion, DMA interrupt</li>
<li>Playback of up to 32 voices limited by the MaximumVoiceRegister</li>
<li>Linear Interpolation (same as used by GF1)</li>
<li>VoicePlayback normal,looped, ping-pong and backwards</li>
<li>VoiceVolume (interpreted exactly the same way as by GF1)</li>
<li>Panning-Register (linear)</li>
<li>VolumeRamping normal, looped, ping-pong and backwards</li>
<li>VolumeRamping supporting fractional increment rates</li>
<li>Rollover-Flag and IRQ</li>
<li>Voice and Volume Ramp IRQs and IRQ status registers</li>
<li>GUS timer interrupts</li>
<li>Reset and Output enable register</li>
<li>so-called Mixer/Configuration register 2x0h</li>
<li>GF1 Sampling Control Register (nonfunctional, same as used by Interwave)</li>
<li>Hidden DMA channel and IRQ hardware configuration registers 2xAh</li>
<li>Registers used for SB and AdLib emulation</li>
</ul>

<h4>Not implemented:</h4>
<ul>
<li>MIDI In / Out / Loopback / IRQ</li>
<li>Mixer IC and its register (not present in original GUS)</li>
<li>All Interwave-specific wavetable registers</li>
<li>Additional CODEC found on later GUS cards</li>
<li>Joystick interface register</li>
</ul>

<h4>Differences:</h4>
<ul>
<li>Voices are always mixed at 44.1 kHz, unaffected by the number of active / maximum voices</li>
<li>GUSemu32 has a latency caused by the mixer and the sound output</li>
<li>Stopped voices without active volume ramps are not mixed into the output stream (yes, the GF1 does this !)</li>
<li>Port accesses are slower than on real GUS, DMA transfer is faster</li>
<li>IRQs can get delayed by several ms</li>
<li>IRQs and DMA channels not used by the original GUS are also available</li>
<li>DMA always transfers a complete data block at once rather than using a step-by-step transfer</li>
<li>Volumes, playback positions and interpolation use one bit more or one bit less in calculations</li>
<li>Reconfiguration of DMA/IRQ via 2xA is ignored</li>
<li>It still requires you current sound hardware ;-)</li>
</ul>

</div>

<a name="prob"><h2>Troubleshooting</h2></a>
<div class="block">
<h4>GUSemu32.exe does not start at all</h4>
<ul>
<li>Make sure that the following files are in the current directory:<br><b>gusemu32.exe</b><br><b>gusemu9x.dll</b> and <b>gusemu32.vxd</b> (Win9x/ME)<br><b>gusemuNT.dll</b> and <b>gusNTvdd.dll</b> (Win2000/XP)</li>
<li>Does DirectSound work ? DirectX Version is 5 or above ?(Check with DXDiag or similar)</li>
<li>At least 2 MB of free memory is required</li>
<li>GUSemu32 does not work under NT4, it needs Windows2000</li>
<li>GUSemu32 does not start by itself, you have to start it manually or include it in a startup file.</li>
</ul>
<h4>DOS programs using GUS do not produce sound or cannot find the emulated GUS</h4>
<ul>
<li>Is GUSemu32.exe running ?</li>
<li>Windows 2000 / XP users: Is the path to gusNTvdd.dll stored correctly in the registry ? You can check this using any tool showing the DLLs loaded by a specific process (DLLSpy, DLLview, DependancyViewer, SystemInfo,...), just look if NTVDM.EXE (the DOS box emulator) has loaded gusNTvdd.dll .</li>
<li>Is the ULTRASND= environment variable set correctly ? Note that although the GUSemu32 sets the ULTRASND= variable correctly in every starting VM / VDM, it may get killed if several programs run sequentially in the same VM / VDM</li>
<li>Some programs only work with standard settings like port 220h or 240h, DMA1, IRQ 3, 5 or 7.</li>
<li>Trivial but quite common: Does the program really use GUS playback code ? Some state having it but it has not been implemented for any reason...</li>
<li>The program may be affected by the STI / CLI / POPF - problem <a href="#if">(see above)</a> and does not work unpatched.</li>
<li>Some programs would not run in the same configuration using a original GUS (e.g., more free memory is required)</li>
<li>Try running ultrinit.exe prior to the demo / intro</li>
<li>Use a fresh DOS box</li>
<li>Switch to fullscreen prior to starting the demo / intro</li>
<li>2k / XP users: Start command prior to the demo / intro - cmd.exe is NOT a DOS shell!</li>
</ul>
<h4>GUSemu32 terminates or crashes</h4>
GUSemu32 is written in a way that neither the hardware abstraction driver nor the mixer engine are likely to access invalid memory addresses or code sections, no matter what the state of the emulator currently is. Thus, crashes should only be caused by external problems not related to GUS emulation itself.
<ul>
<li>Win 9x: A crash can happen if a DOS program overwrites critical parts of the emulator due to insufficient access protection in Win 9x. Modifying the DOS Box memory configuration can solve this. In general, such programs are likely to cause the whole OS to crash as well.</li>
<li>Win 2000 / XP: This should never happen, if you can reproduce it several times please mail me a detailed description of the problem.</li>
</ul>
</div>

<a name="faq"><h2>Frequently Asked Questions</h2></a>
<div class="block">
This FAQ is new and therefore there are only few questions asked so far... Add more by sending them to <a href="mailto:gusemu@deinmeister.de?subject=GUSemu32 FAQ">gusemu@deinmeister.de</a>.
<ul>
<li class="q">What do all these abbreviations mean ?</li>
<li class="a">See here:
<ul>
<li>GUS:<br>Gravis Ultrasound, the famous 32-Voice-Wavetable card using up to 1 MB of sample RAM, capable of mixing up to 14 voices at 44.1kHz in hardware (32 voices were mixed at 19.2kHz).</li>
<li>VDM:<br>Virtual DOS Machine, the DOS emulation provided by NTVDM.EXE in WindowsNT/2000. Note that a VDM is only created when starting a DOS program, the NT console uses CMD.EXE instead of COMMAND.COM by default, and since CMD.EXE is a 32bit NT executable, it does not use NTVDM or run in a VDM</li>
<li>VM:<br>Virtual Machine, either the system VM itself or a DOS box running under Windows9x/ME</li>
<li>EMS:<br>Expanded Memory, provided by EMM386.EXE, most memory managers under DOS switch from RealMode to V86 mode in order to provide it</li>
<li>XMS:<br>Extended Memory, provided by HIMEM.SYS, does not require DOS running in V86, allocated memory can be used in every execution mode</li>
<li>VCPI:<br>Protected-Mode interface provided by memory managers like EMM386.EXE. Requires running DOS in V86 and is typically used if DPMI is not available, but V86 is active. Not used for memory allocation</li>
<li>DPMI:<br>Protected-Mode interface provided by DPMI servers like Win3.x/9x, CWSDPMI (DOS) or DOSX (under WinNT/2000). Quite famous since it allows easy use of 32bit code under DOS and has a handy interface for memory allocation, interrupt usage and protected mode execution. Used by PMODE and DOS4GW if available.</li>
</ul></li>
</ul>
<ul>
<li class="q">How much CPU time does GUSemu32 use ?</li>
<li class="a">On a 350-MHz K6, running plain GUSemu32 requires about 2-3 % CPU time. Playing all voices increase this by several dozen %. Activating the frequent update feature eats up about 20%. However, large amounts of interrupts and/or port accesses can eat up most of the CPU time granted to a DOS Box easily.</li>
</ul>
<ul>
<li class="q">Can I run other applications with sound while GUSemu32 is running ?</li>
<li class="a">Yes, GUSemu32 uses a secondary buffer, thus other applications using secondary buffers can use the soundcard as well, even while GUSemu plays sound back. On my system, both GUSemu32 and the modplayer are running for hours without problems. If applications using wave out will also work at the same time depends on the driver: WDM drivers always support this, VxD drivers (as used in Win95) usually don´t.</li>
</ul>
<ul>
<li class="q">What are the benefits of running GUSemu under Win9x rather than on Win2000?</li>
<li class="a">Win9x grants access to additional memory addresses and ports not hooked by a driver, allowing programs to use nonvirtualized features like VBE2.</li>
</ul>
<ul>
<li class="q">What are the benefits of running GUSemu under Win2000 rather than on Win9x ?</li>
<li class="a">A VDM provides more free base memory than the DOS Box in Win9x. NT also provides better multitasking which can be a problem for GUSemu32 under 9x. And DOS programs do not crash the OS.</li>
</ul>
<ul>
<li class="q">Can other Windows/OS2/... programs also benefit from GUSemu32 ?</li>
<li class="a">No. GUSemu32 virtualizes the GUS only for DOS-boxes and thus is only accessible from DOS applications</li>
</ul>
<ul>
<li class="q">What´s the exact format of the ULTRASND= environment variable ?</li>
<li class="a">The format is the following:<br><br>
<big><kbd>ULTRASND=<i>Port</i>,<i>DMA1</i>,<i>DMA2</i>,<i>IRQ1</i>,<i>IRQ2</i></kbd></big><br><br>
<i>Port</i> indicates the base port between 210 and 290 (hexadecimal).<br><br>
<i>DMA1</i> the DMA channel used for accessing the Wavetable RAM (uploading / downloading samples to the GUS)<br>
<i>DMA2</i> the DMA channel used by the CODEC<br>
&nbsp;Both DMA channels can be merged together using only the first DMA channel (this is what GUSemu32 uses). In this case, both <i>DMA1</i> and <i>DMA2</i> are set to this channel.<br><br>
<i>IRQ1</i> the IRQ line used by wavetable (voice playback, volume ramping, DMA uploading)<br>
<i>IRQ2</i> the IRQ line used for MIDI<br>
&nbsp;Both IRQ lines can be merged together using only one IRQ line (this is what GUSemu32 uses). In this case, both <i>IRQ1</i> and <i>IRQ2</i> are set to this line.
</li>
</ul>
<ul>
<li class="q">Starting programs using the GUS takes some time</li>
<li class="a">Most programs upload the samples to the GUS using the 3x7h register. In this case every byte requires about 2 - 5 port accesses for uploading it. Every port access causes an exception to be handled and switched back to the DOS Box. Uploading 1 MB of sample data causes several millions of mode switches, each requiring hundreds of clock cycles.<br>
Uploading data via DMA, however, is practically only limited by the speed of the main memory.</li>
</ul>
<ul>
<li class="q">Will there be GUSemu for other Operating Systems ?</li>
<li class="a">GUSemu for RealMode DOS, EMM386/VCPI and/or DPMI is planned, but development is currently stopped due to the lack of legacy soundcard compatibility of todays PCs. Versions for Bochs, Plex86, VMWare or DOSEMU are thought of, but without any guarantee. It depends on the available interfaces and quality of these emulators as well.<br>However, the GUSemu32 core has been integrated into Minde and is also available as a Qemu patch.</li>
</ul>
<ul>
<li class="q">What should a good Win9x configuration look like ?</li>
<li class="a">Take a look at:<ul>
<li>If himem.sys uses 40kb of memory like in Win95b, get the io.sys patch for it (check using the <b>mem /c /p</b> command)</li>
<li>Add <b>LocalLoadHigh=1</b> to your system.ini in the <b>[386enh]</b> section</li>
<li><u>msdos.sys</u>
<ul>
<li>set <b>DblSpace=0</b></li>
<li>set <b>DrvSpace=0</b></li>
<li>set <b>LoadTop=1</b></li>
</ul>
</li>
<li><u>config.sys</u>
<ul>
<li>include <b>DOS=NOAUTO</b> in order to prevent drivers beeing loaded automatically without being contained in config.sys</li>
<li>add <b>DOS=HIGH,UMB</b> in order to allow parts of DOS to be loaded to upper memory rather than conventional memory</li>
<li>include <b>DEVICE=HIMEM.SYS</b></li>
<li>followed by <b>DEVICE=EMM386.EXE AUTO RAM</b> , this enables use of High and UMB memory as well as EMS memory</li>
<li>add <b>DEVICEHIGH=IFSHLP.SYS</b> , it is needed by 9x and is no longer loaded automatically due to DOS=NOAUTO specified</li>
<li>throw out: IDE CD-ROM driver, mouse drivers, SMARTDRV.EXE, maybe also DISPLAY and MODE lines and the keyboard driver.<br>Make sure the EMM386 line is NOT followed by a NOEMS parameter, otherwise some programs won´t work.</li>
</ul></li>
<li><u>autoexec.bat</u>
<ul>
<li>Throw out: mouse driver, MSCDEX (=CD-ROM) driver, SMARTDRV.EXE, maybe the keyboard driver.</li>
</ul></li>
</ul>
Example for a good Win9x config.sys:
<pre>DOS=NOAUTO
SWITCHES=/F
DOS=HIGH,UMB
DEVICEHIGH=C:\WINDOWS\HIMEM.SYS /TESTMEM:OFF
DEVICE=C:\WINDOWS\EMM386.EXE AUTO RAM
DEVICEHIGH=C:\WINDOWS\IFSHLP.SYS
LASTDRIVEHIGH=F</pre>
</li>
And the according Win9x autoexec.bat:
<pre>SET BLASTER=A220 I5 D1 H5 T6
PROMPT $P$G
PATH=C:\WINDOWS;C:\WINDOWS\COMMAND
SET TEMP=C:\WINDOWS\TEMP
SET TMP=C:\WINDOWS\TEMP
</pre>
Note that you can create <a href="http://www.deinmeister.de/dosconf_e.htm" target="_blank">an even better configuration</a> by using third-party tools.
</ul>
<ul>
<li class="q">What to do under Windows2000/XP?</li>
<li class="a">There is not much to do, you may get a few extra bytes of free DOS memory by creating a special autoexec.nt and config.nt by removing DOSX and MSCDEXNT. Activating the compatible timer emulation and XMS / EMS (in general or in specific PIF files) can solve some problems. Sometimes it may help to start a program from a fullscreen console if a program aborts during startup.</li>
</ul>
</div>

<a name="legal"><h2>Legal Stuff</h2></a>
<div class="block">
In order to use GUSemu32, you have to acknowledge the following rules:
<ul>
<li>Sharing copies of GUSemu32 is welcome, but you have to distribute the entire package containing of at least gusemu32.exe, gusemu9x.dll, gusemu32.vxd, gusemuNT.dll, gusNTvdd.dll and the complete manual consisting of manual.htm, gusemu.css, a.gif, back.jpg, card.gif, g32gui.gif and q.gif.
<li>Publishing GUSemu on websites, magazines and other media as well as distribution on CD-ROM, floppy disks, etc. requires permission by the author.</li>
<li>The author of GUSemu32 is NOT responsible for all cases of damage (hardware, software, financial, health,...) caused by GUSemu32. Use of this software is entirely at your own risk.</li>
<li>All rights depending on the GUSemu32 program are owned by its author, Tibor Sch&uuml;tz aka  <a href="mailto:gusemu@deinmeister.de?subject=GUSemu32">T$</a></li>
</ul>
</div>

<hr><div align="center" class="nb">
 <a href="index.html" class="ilink" title="Click here to get to the GUSemu main page">GUSemu&nbsp;Homepage</a> - <a href="news.htm" class="ilink" title="Program and homepage update history">News</a> - <a href="complist.htm" class="ilink" title="List of tested intros">Intro&nbsp;Compatibility&nbsp;List</a> - <a href="cmpdmlst.htm" class="ilink" title="List of tested demos">Demo&nbsp;Compatibility&nbsp;List</a> - <a href="manual.htm" class="ilink" title="Read the manual online here">GUSemu32&nbsp;Manual</a> - <a href="manual.htm#sysreq" class="ilink" title="What GUSemu needs">System&nbsp;Requirements</a> - <a href="manual.htm#faq" class="ilink" title="Frequently Asked Questions">FAQ</a> - <a href="download.htm" class="ilink" title="Download GUSemu">Download&nbsp;Page</a> - <a href="thanx.htm" class="ilink" title="Greets">Links &amp; Greets</a>
</div>
<br>
<hr>
The official GUSemu homepage <a href="http://listen.to/gusemu">http://listen.to/gusemu</a> - (c) 2000-2006 by <a href="mailto:gusemu@deinmeister.de?subject=GUSemu32">T$</a>

</body>
</html>
